{"ast":null,"code":"var _jsxFileName = \"D:\\\\company system 2\\\\companysystem2\\\\Frontend\\\\src\\\\components\\\\Stopwatch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stopwatch() {\n  _s();\n  const [time, setTime] = useState(0);\n  const [laps, setLaps] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning]);\n  const startStopwatch = () => {\n    setIsRunning(true);\n  };\n  const stopStopwatch = () => {\n    setIsRunning(false);\n  };\n  const resetStopwatch = () => {\n    setTime(0);\n    setLaps([]);\n    setIsRunning(false);\n  };\n  const lapStopwatch = () => {\n    if (laps.length === 0) {\n      setLaps([time]);\n    } else {\n      setLaps(prevLaps => [...prevLaps, time - prevLaps[prevLaps.length - 1]]);\n    }\n  };\n\n  // Calculate average lap time\n  const calculateAverageLapTime = () => {\n    if (laps.length < 2) return 0;\n    const lapTimes = laps.slice(1).map((lapTime, index) => lapTime - laps[index]);\n    const totalLapTime = lapTimes.reduce((acc, lapTime) => acc + lapTime, 0);\n    const averageTime = totalLapTime / lapTimes.length;\n    const adjustedTime = averageTime * 1.1;\n    return adjustedTime;\n  };\n  const calculatePiecesPerHour = () => {\n    const adjustedAverageLapTime = calculateAverageLapTime();\n    if (adjustedAverageLapTime === 0) return 0;\n    const piecesPerHour = 3600 / adjustedAverageLapTime; // 3600 seconds in an hour\n    return piecesPerHour.toFixed(2); // returning a formatted value with 2 decimal places\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: formatTime(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startStopwatch,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopStopwatch,\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetStopwatch,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: lapStopwatch,\n      children: \"Lap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: laps.map((lapTime, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: `Lap ${index + 1}: ${formatTime(lapTime)}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average Lap Time (with 10%): \", formatTime(calculateAverageLapTime())]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pieces per Hour: \", calculatePiecesPerHour()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Stopwatch, \"D3TYMWAXAKhHZJYif76RsyVm5W4=\");\n_c = Stopwatch;\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Stopwatch","_s","time","setTime","laps","setLaps","isRunning","setIsRunning","interval","setInterval","prevTime","clearInterval","startStopwatch","stopStopwatch","resetStopwatch","lapStopwatch","length","prevLaps","calculateAverageLapTime","lapTimes","slice","map","lapTime","index","totalLapTime","reduce","acc","averageTime","adjustedTime","calculatePiecesPerHour","adjustedAverageLapTime","piecesPerHour","toFixed","children","formatTime","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","minutes","Math","floor","seconds","$RefreshReg$"],"sources":["D:/company system 2/companysystem2/Frontend/src/components/Stopwatch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Stopwatch() {\r\n  const [time, setTime] = useState(0);\r\n  const [laps, setLaps] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setTime(prevTime => prevTime + 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isRunning]);\r\n\r\n  const startStopwatch = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const stopStopwatch = () => {\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const resetStopwatch = () => {\r\n    setTime(0);\r\n    setLaps([]);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const lapStopwatch = () => {\r\n    if (laps.length === 0) {\r\n      setLaps([time]);\r\n    } else {\r\n      setLaps(prevLaps => [...prevLaps, time - prevLaps[prevLaps.length - 1]]);\r\n    }\r\n  };\r\n\r\n  // Calculate average lap time\r\n  const calculateAverageLapTime = () => {\r\n    if (laps.length < 2) return 0;\r\n    \r\n    const lapTimes = laps.slice(1).map((lapTime, index) => lapTime - laps[index]);\r\n    const totalLapTime = lapTimes.reduce((acc, lapTime) => acc + lapTime, 0);\r\n    const averageTime = totalLapTime / lapTimes.length;\r\n    const adjustedTime = averageTime * 1.1;\r\n\r\n    return adjustedTime;\r\n  };\r\n\r\n  const calculatePiecesPerHour = () => {\r\n    const adjustedAverageLapTime = calculateAverageLapTime();\r\n    if (adjustedAverageLapTime === 0) return 0;\r\n    \r\n    const piecesPerHour = 3600 / adjustedAverageLapTime; // 3600 seconds in an hour\r\n    return piecesPerHour.toFixed(2); // returning a formatted value with 2 decimal places\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{formatTime(time)}</h1>\r\n      <button onClick={startStopwatch}>Start</button>\r\n      <button onClick={stopStopwatch}>Stop</button>\r\n      <button onClick={resetStopwatch}>Reset</button>\r\n      <button onClick={lapStopwatch}>Lap</button>\r\n      <ul>\r\n        {laps.map((lapTime, index) => (\r\n          <li key={index}>{`Lap ${index + 1}: ${formatTime(lapTime)}`}</li>\r\n        ))}\r\n      </ul>\r\n      <p>Average Lap Time (with 10%): {formatTime(calculateAverageLapTime())}</p>\r\n      <p>Pieces per Hour: {calculatePiecesPerHour()}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction formatTime(time) {\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n  return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n}\r\n\r\nexport default Stopwatch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}